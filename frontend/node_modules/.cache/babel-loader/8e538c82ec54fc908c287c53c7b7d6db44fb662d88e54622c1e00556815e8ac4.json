{"ast":null,"code":"import { redirect } from \"react-router\";\nexport const fetchEvents = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  }\n  return response;\n};\nexport const fetchEventDetail = async ({\n  request,\n  params\n}) => {\n  const id = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch details for selected event.\"\n    }), {\n      status: 500\n    });\n  }\n  return response;\n};\nexport const sendEvent = async ({\n  request,\n  params\n}) => {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not save event.\"\n    }, {\n      status: 500\n    }));\n  }\n  return redirect(\"/events\");\n};\nexport const removeEventId = async ({\n  params\n}) => {\n  const eventId = params.eventId;\n  const response = await fetch(`http://localhost:8080/events/${eventId}`, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not delete event.\"\n    }, {\n      status: 500\n    }));\n  }\n  return redirect(\"/events\");\n};","map":{"version":3,"names":["redirect","fetchEvents","response","fetch","ok","Response","JSON","stringify","message","status","fetchEventDetail","request","params","id","eventId","sendEvent","data","formData","eventData","title","get","image","date","description","method","headers","body","removeEventId"],"sources":["C:/Users/Admin/OneDrive/Робочий стіл/project/router-react/frontend/src/api/api.js"],"sourcesContent":["import { redirect } from \"react-router\";\r\n\r\nexport const fetchEvents = async () => {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport const fetchEventDetail = async ({ request, params }) => {\r\n  const id = params.eventId;\r\n\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({\r\n        message: \"Could not fetch details for selected event.\",\r\n      }),\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nexport const sendEvent = async ({ request, params }) => {\r\n  const data = await request.formData();\r\n\r\n  const eventData = {\r\n    title: data.get(\"title\"),\r\n    image: data.get(\"image\"),\r\n    date: data.get(\"date\"),\r\n    description: data.get(\"description\"),\r\n  };\r\n\r\n  const response = await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"Could not save event.\" }, { status: 500 })\r\n    );\r\n  }\r\n\r\n  return redirect(\"/events\");\r\n};\r\n\r\nexport const removeEventId = async ({ params }) => {\r\n  const eventId = params.eventId;\r\n\r\n  const response = await fetch(`http://localhost:8080/events/${eventId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"Could not delete event.\" }, { status: 500 })\r\n    );\r\n  }\r\n\r\n  return redirect(\"/events\");\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AAEvC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,OAAOP,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAO;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAC7D,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGU,EAAE,CAAC;EAElE,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MACbC,OAAO,EAAE;IACX,CAAC,CAAC,EACF;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;EAEA,OAAOP,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMa,SAAS,GAAG,MAAAA,CAAO;EAAEJ,OAAO;EAAEC;AAAO,CAAC,KAAK;EACtD,MAAMI,IAAI,GAAG,MAAML,OAAO,CAACM,QAAQ,CAAC,CAAC;EAErC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACrC,CAAC;EAED,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DqB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEpB,IAAI,CAACC,SAAS,CAACW,SAAS;EAChC,CAAC,CAAC;EAEF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CACtE,CAAC;EACH;EAEA,OAAOT,QAAQ,CAAC,SAAS,CAAC;AAC5B,CAAC;AAED,OAAO,MAAM2B,aAAa,GAAG,MAAAA,CAAO;EAAEf;AAAO,CAAC,KAAK;EACjD,MAAME,OAAO,GAAGF,MAAM,CAACE,OAAO;EAE9B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgCW,OAAO,EAAE,EAAE;IACtEU,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACtB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CACxE,CAAC;EACH;EAEA,OAAOT,QAAQ,CAAC,SAAS,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}